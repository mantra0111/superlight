{"version":3,"file":"component---src-pages-contentful-blog-post-id-tsx-1786c8ff0b8da621d659.js","mappings":"gLAsDA,EAnDmB,SAAC,GAAsC,IAApCA,EAAmC,EAAnCA,QAsBpB,OACE,gBAAC,KAAD,CAAaC,MAAK,aAkBXC,OAAQ,SAACC,GACV,IAAMC,EAAoCD,EAAKE,mBAAmBC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKC,gBAAiBT,KAAS,GAEjHU,EAAON,EAAYO,KAAnBD,IACP,EAAwBN,EAAYO,KAAKC,QAAQC,MAA1CC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MACjB,OAAQ,uBAAMD,OAAQA,EAAQC,MAAOA,EAAOC,IAAG,SAAWN,QCQlE,IAYA,EAZgD,SAAC,GAAW,IAAVO,EAAS,EAATA,IAG9C,OACI,2BAASC,GAAG,gBACNC,KAAKC,MAAMH,GAAqBI,QAAQC,KAAI,SAACd,GAAD,OA1BtCe,GAApB,EA4BsBf,GA5BFe,SAASF,EAAuB,EAAvBA,QAAQlB,EAAe,EAAfA,KAEqC,CAClE,YAAckB,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,uBAAyB,gBAAC,EAAD,CAAYzB,QAAO,UAAEG,EAAKuB,cAAP,aAAE,EAAaC,IAAIT,KAC/D,UAAcG,EAAQG,OAAS,EAAyB,KAArBH,EAAQ,GAAGI,MAAe,2BAAQ,yBAAIJ,EAAQ,GAAGI,OAAa,MAGxFF,GAbjB,MAAoD,EAAhCA,EAASF,EAAQlB,OCYrC,EA9B2B,SAACyB,GAE1B,MAAgDA,EAAMzB,KAAK0B,mBAAnDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAAaC,EAAlC,EAAkCA,UAElC,OACE,4BACE,2BAASd,GAAG,eACZ,0BAAI,qBAAGe,KAAK,KAAR,qBACJ,0BAAKD,GACL,uBAAKhB,IAAG,SAAWc,EAAYnB,KAAKD,IAAOwB,IAAG,SAAWF,EAAX,kBAE9C,gBAACG,EAAD,CAAWlB,IAAKc,EAAYd","sources":["webpack://superlight/./src/components/AssetToUrl/AssetToUrl.tsx","webpack://superlight/./src/components/RawToText/RawToText.tsx","webpack://superlight/./src/pages/{contentfulBlogPost.id}.tsx"],"sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst AssetToUrl = ({ assetId }: { assetId: string }) => {\n  interface ContentfulAssetNode {\n    contentful_id : string\n    file : {\n      url : string\n      details : {\n        image : {\n          height : number\n          width : number\n        }\n      } | null\n    }\n  }\n\n\n  interface GetAllAssetsQuery {\n    allContentfulAsset : {\n      nodes : ContentfulAssetNode[]\n    }\n  }\n\n\n  return (\n    <StaticQuery query={graphql`\n        query GetAllAssetsQuery {\n  allContentfulAsset {\n    nodes {\n      contentful_id\n      file {\n        url\n        details {\n          image {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}\n    \n        `} render={(data : GetAllAssetsQuery) => {\n          const filterAsset : ContentfulAssetNode = data.allContentfulAsset.nodes.filter((node)=>  node.contentful_id=== assetId)[0]\n          \n          const {url} = filterAsset.file\n          const {height, width} = filterAsset.file.details.image \n        return (<img  height={height} width={width} src={`https:${url}`} />)\n      }} />\n  )\n}\n\nexport default AssetToUrl","import React from 'react'\nimport AssetToUrl from '../AssetToUrl'\n\ninterface Content {\n    nodeType : \"heading-6\" |\n     \"heading-5\" |\n     \"heading-4\" |\n     \"heading-3\" |\n     \"heading-2\" |\n     \"heading-1\" |\n     \"paragraph\" | \n     \"embedded-asset-block\"\n    content : {\n        nodeType : string\n        value : string\n        marks : unknown[]\n        data : unknown\n    }[] | null\n\n    data : {\n        target : {\n            sys : {\n                id : string\n                type : string\n                linkType : string\n            } | null\n        }| null\n    }  \n}\n\ninterface PostContent {\n    nodeType : string\n    data : Object\n    content : Content[]\n}\n\nfunction HTMLMaker({nodeType,content,data}:Content) {\n    \n    const maker : {[property in Content[\"nodeType\"]] : React.ReactNode} = {\n        \"heading-1\" : content.length ? <h1> {content[0].value}</h1> : null,\n        \"heading-2\" : content.length ? <h2> {content[0].value}</h2> : null,\n        \"heading-3\" : content.length ? <h3> {content[0].value}</h3> : null,\n        \"heading-4\" : content.length ? <h4> {content[0].value}</h4> : null,\n        \"heading-5\" : content.length ? <h5> {content[0].value}</h5> : null,\n        \"heading-6\" : content.length ? <h6> {content[0].value}</h6> : null,\n        \"embedded-asset-block\" : <AssetToUrl assetId={data.target?.sys.id} />,\n        \"paragraph\" : content.length > 0 ? content[0].value === \"\" ? <br/> : <p>{content[0].value}</p> : null\n    }\n\n    return maker[nodeType]\n}\n\n\ninterface RawToEdibleProps {\n        raw: string\n}\n\nconst RawToEdible :React.FC<RawToEdibleProps> = ({raw}) => {\n\n    \n    return(\n        <section id=\"post-content\" >\n            {(JSON.parse(raw) as PostContent).content.map((node)=>\n            //@ts-ignore\n            HTMLMaker(node))}\n        </section>\n    )\n}\n\nexport default RawToEdible","import React from 'react'\nimport { PageProps, graphql } from 'gatsby'\nimport RawToText from '../components/RawToText'\n\ninterface QueryAsProps {\n  contentfulBlogPost: {\n    heroPicture: {\n      file: {\n        url: string\n      }\n    }\n    postTitle: string\n    postContent: {\n      raw: string\n    }\n  }\n}\n\nconst contentfulBlogPost = (props: PageProps<QueryAsProps>) => {\n\n  const { heroPicture, postContent, postTitle } = props.data.contentfulBlogPost\n  \n  return (\n    <main >\n      <section id=\"post-header\" >\n      <h1><a href=\"/\">{`<-`} back home </a></h1>\n      <h1>{postTitle}</h1>\n      <img src={`https:${heroPicture.file.url}`} alt={`post \"${postTitle}\" hero image`} />\n      </section>\n      <RawToText raw={postContent.raw} />\n    </main>\n  )\n}\n\nexport const query = graphql`query PostContentQuery($id : String) {\n    contentfulBlogPost(id: {eq: $id}) {\n      heroPicture {\n        file {\n          url\n        }\n      }\n      postTitle\n      postContent {\n        raw\n      }\n    }\n  }`\n\nexport default contentfulBlogPost"],"names":["assetId","query","render","data","filterAsset","allContentfulAsset","nodes","filter","node","contentful_id","url","file","details","image","height","width","src","raw","id","JSON","parse","content","map","nodeType","length","value","target","sys","props","contentfulBlogPost","heroPicture","postContent","postTitle","href","alt","RawToText"],"sourceRoot":""}