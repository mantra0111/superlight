{"version":3,"file":"component---src-pages-contentful-blog-post-id-tsx-9654e95e50817b524d45.js","mappings":"0LAyDA,EAtDmB,SAAC,GAAsC,IAApCA,EAAmC,EAAnCA,QAqBpB,OACE,gBAAC,KAAD,CACEC,MAAK,aAqBLC,OAAQ,SAACC,GACP,IAAMC,EAAmCD,EAAKE,mBAAmBC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKC,gBAAkBT,KAAS,GACjHU,EAASN,EAATM,MACCC,EAAQP,EAAYQ,KAApBD,IACR,EAA0BP,EAAYQ,KAAKC,QAAQC,MAA3CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAChB,OAAQ,uBAAKD,OAAQA,EAAQE,IAAKP,EAAOM,MAAOA,EAAOE,IAAG,SAAWP,QCK7E,IAYA,EAZgD,SAAC,GAAW,IAAVQ,EAAS,EAATA,IAG9C,OACI,2BAASC,GAAG,gBACNC,KAAKC,MAAMH,GAAqBI,QAAQC,KAAI,SAAChB,GAAD,OA1BtCiB,GAApB,EA4BsBjB,GA5BFiB,SAASF,EAAuB,EAAvBA,QAAQpB,EAAe,EAAfA,KAEqC,CAClE,YAAcoB,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,YAAcJ,EAAQG,OAAS,8BAAMH,EAAQ,GAAGI,OAAc,KAC9D,uBAAyB,gBAAC,EAAD,CAAY3B,QAAO,UAAEG,EAAKyB,cAAP,aAAE,EAAaC,IAAIT,KAC/D,UAAcG,EAAQG,OAAS,EAAyB,KAArBH,EAAQ,GAAGI,MAAe,2BAAQ,yBAAIJ,EAAQ,GAAGI,OAAa,MAGxFF,GAbjB,MAAoD,EAAhCA,EAASF,EAAQpB,OCoCrC,EA/C2B,SAAC2B,GAE1B,MAAgDA,EAAM3B,KAAK4B,mBAAnDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAAaC,EAAlC,EAAkCA,UAElC,OACE,4BACE,gBAACC,EAAA,EAAD,CACEzB,MAAK,gBAAkBwB,EACvBE,eAAgB,CAAEC,KAAM,OACxB,wBAAMC,KAAK,SAASf,QAAQ,0BAC5B,wBAAMe,KAAK,WAAWf,QAAQ,6CAC9B,wBAAMe,KAAK,cAAcf,QAAQ,iCAEnC,2BAASH,GAAG,eACZ,0BAAI,qBAAGmB,KAAK,KAAR,qBACJ,0BAAKL,GACL,uBACEhB,IAAG,SAAWc,EAAYpB,KAAKD,IAC/BM,IAAG,SAAWiB,EAAX,eACHnB,OAAQiB,EAAYpB,KAAKC,QAAQC,MAAMC,OACvCC,MAAOgB,EAAYpB,KAAKC,QAAQC,MAAME,SAExC,gBAACwB,EAAD,CAAWrB,IAAKc,EAAYd","sources":["webpack://superlight/./src/components/AssetToUrl/AssetIdToUrl.tsx","webpack://superlight/./src/components/RawToText/RawToText.tsx","webpack://superlight/./src/pages/{contentfulBlogPost.id}.tsx"],"sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst AssetToUrl = ({ assetId }: { assetId: string }) => {\n  interface ContentfulAssetNode {\n    contentful_id: string\n    title : string\n    file: {\n      url: string\n      details: {\n        image: {\n          height: number\n          width: number\n        }\n      } | null\n    }\n  }\n\n  interface GetAllAssetsQuery {\n    allContentfulAsset: {\n      nodes: ContentfulAssetNode[]\n    }\n  }\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query GetAllAssetsQuery {\n  allContentfulAsset {\n    nodes {\n      title\n      contentful_id\n      file {\n        url\n        details {\n          image {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n}\n    \n        `}\n\n      render={(data: GetAllAssetsQuery) => {\n        const filterAsset: ContentfulAssetNode = data.allContentfulAsset.nodes.filter((node) => node.contentful_id === assetId)[0]\n        const {title} = filterAsset\n        const { url } = filterAsset.file\n        const { height, width } = filterAsset.file.details.image\n        return (<img height={height} alt={title} width={width} src={`https:${url}`} />)\n      }} />\n  )\n}\n\nexport default AssetToUrl","import React from 'react'\nimport AssetToUrl from '../AssetToUrl'\n\ninterface Content {\n    nodeType : \"heading-6\" |\n     \"heading-5\" |\n     \"heading-4\" |\n     \"heading-3\" |\n     \"heading-2\" |\n     \"heading-1\" |\n     \"paragraph\" | \n     \"embedded-asset-block\"\n    content : {\n        nodeType : string\n        value : string\n        marks : unknown[]\n        data : unknown\n    }[] | null\n\n    data : {\n        target : {\n            sys : {\n                id : string\n                type : string\n                linkType : string\n            } | null\n        }| null\n    }  \n}\n\ninterface PostContent {\n    nodeType : string\n    data : Object\n    content : Content[]\n}\n\nfunction HTMLMaker({nodeType,content,data}:Content) {\n    \n    const maker : {[property in Content[\"nodeType\"]] : React.ReactNode} = {\n        \"heading-1\" : content.length ? <h1> {content[0].value}</h1> : null,\n        \"heading-2\" : content.length ? <h2> {content[0].value}</h2> : null,\n        \"heading-3\" : content.length ? <h3> {content[0].value}</h3> : null,\n        \"heading-4\" : content.length ? <h4> {content[0].value}</h4> : null,\n        \"heading-5\" : content.length ? <h5> {content[0].value}</h5> : null,\n        \"heading-6\" : content.length ? <h6> {content[0].value}</h6> : null,\n        \"embedded-asset-block\" : <AssetToUrl assetId={data.target?.sys.id} />,\n        \"paragraph\" : content.length > 0 ? content[0].value === \"\" ? <br/> : <p>{content[0].value}</p> : null\n    }\n\n    return maker[nodeType]\n}\n\n\ninterface RawToEdibleProps {\n        raw: string\n}\n\nconst RawToEdible :React.FC<RawToEdibleProps> = ({raw}) => {\n\n    \n    return(\n        <section id=\"post-content\" >\n            {(JSON.parse(raw) as PostContent).content.map((node)=>\n            //@ts-ignore\n            HTMLMaker(node))}\n        </section>\n    )\n}\n\nexport default RawToEdible","import React from 'react'\nimport {Helmet} from 'react-helmet'\nimport { PageProps, graphql } from 'gatsby'\nimport RawToText from '../components/RawToText'\n\ninterface QueryAsProps {\n  contentfulBlogPost: {\n    heroPicture: {\n      file: {\n        details : {\n          image : {\n            width : number\n            height : number\n          }\n        }\n        url: string\n      }\n    }\n    postTitle: string\n    postContent: {\n      raw: string\n    }\n  }\n}\n\nconst contentfulBlogPost = (props: PageProps<QueryAsProps>) => {\n\n  const { heroPicture, postContent, postTitle } = props.data.contentfulBlogPost\n  \n  return (\n    <main >\n      <Helmet\n        title={`SuperLight - ${postTitle}`}\n        htmlAttributes={{ lang: 'en' }} >\n        <meta name=\"author\" content=\"Mateo Sierra Betancur\" />\n        <meta name=\"keywords\" content=\"development,blog,javascript,mateo,sierra\" />\n        <meta name=\"description\" content=\"blog about development ... \" />\n      </Helmet>\n      <section id=\"post-header\" >\n      <h1><a href=\"/\">{`<-`} back home </a></h1>\n      <h1>{postTitle}</h1>\n      <img \n        src={`https:${heroPicture.file.url}`} \n        alt={`post \"${postTitle}\" hero image`}\n        height={heroPicture.file.details.image.height}\n        width={heroPicture.file.details.image.width} />\n      </section>\n      <RawToText raw={postContent.raw} />\n    </main>\n  )\n}\n\nexport const query = graphql`query PostContentQuery($id : String) {\n    contentfulBlogPost(id: {eq: $id}) {\n      heroPicture {\n        file {\n          url\n          details {\n            image {\n              width \n              height\n            }\n          }\n        }\n      }\n      postTitle\n      postContent {\n        raw\n      }\n    }\n  }`\n\nexport default contentfulBlogPost"],"names":["assetId","query","render","data","filterAsset","allContentfulAsset","nodes","filter","node","contentful_id","title","url","file","details","image","height","width","alt","src","raw","id","JSON","parse","content","map","nodeType","length","value","target","sys","props","contentfulBlogPost","heroPicture","postContent","postTitle","Helmet","htmlAttributes","lang","name","href","RawToText"],"sourceRoot":""}